enter: ""
phaseI_result: "FLIGHT I"
phaseII_result: "FLIGHT II"
phaseIII_result: "FLIGHT III"
final_result: "TOTAL"
player_phase_result: "[n]. [p] has [n1] credits:"
score_order: "[n] for order of finish"
score_beautiful_ship: "[n] for the best-looking ship"
score_earned: "[n] gained during flight"
score_lost_parts: "[n] for lost components"
score_cargo: "[n] from selling goods"
score_prev_flights: "[n] from previous flights"
score_mpm: "[n] for mission rewards"
score_mpm_penalty: "[n] for mission penalties"
flight_phase: "FLIGHT"
flight_finished: "FLIGHT FINISHED"
scoring: "SCORE"
preparing_flight: "Preparing for launch:"
set_order: "Setting flight order:"
loose_order: "[p] loses [n] flight day[n(1:|2:s)]:"
new_order: "New flight order:"
alien_take_p: "[p] takes a purple alien on board."
alien_take_b: "[p] takes a brown alien on board."
alien_take_pb: "[p] takes a brown and a purple alien on board."
alien_take_c: "[p] takes a cyan alien on board."
reveal_card: "Adventure: [s]."
cant_loot_station: "[p] does not have enough crew to loot the station."
do_not_want_loot_station: "[p] chooses not to loot the station."
loot_station: "[p] loots the station: [i(flightScene/cargoRed.png)*n] [i(flightScene/cargoYellow.png)*n1] [i(flightScene/cargoGreen.png)*n2] [i(flightScene/cargoBlue.png)*n3]."
do_not_want_sell_ship: "[p] does not want to send any crew to the abandoned ship."
cant_take_ship: "[p] does not have enough crew to send to the abandoned ship."
sell_ship: "[p] sells the abandoned ship to [g(his|her)] crew."
loose_crew: "[p] gives up [n(0:no|1:one|2:two|3:three|4:four|5:five|6:six|7:seven|8:eight|9:nine|10:ten|11:eleven|12:twelve|13:thirteen|14:fourteen|15:fifteen|16:sixteen|17:seventeen|18:eighteen|19:nineteen|20:twenty|21:many)] crew member[n(1:|2:s)]."
end_turn_with_points: "[p] ends [g(his|her)] turn, keeping [n] [img(extra_build_point)]."
gain_credit: "[p] gains [n] credit[n(1:|2:s)]."
move: "[p] advances [n] flight day[n(1:|2:s)]."
not_move: "[p] has zero engine strength and must give up on the flight."
energy_move: "[p] uses [n] [n(0:batteries|1:battery|2:batteries)] and advances [n1] flight day[n1s]."
not_energy_move: "[p] uses no batteries and gives up on the flight."
lost_parts: "[p] lost [n] component[n(1:|2:s)]."
reflect_by_shield: "[p] powers a shield to deflect a meteor."
projectile_reflect_by_shield: "[p] powers a shield to absorb cannon fire."
shoot_meteor: "[p] powers a double cannon to blow up a meteor."
shoot_meteor_catapult: "[p] powers a catapult to blow up a meteor."
stardust: "[p] loses [n] flight day[n(1:|2:s)]."
epidemic_c: "[p] loses [n] astronaut[n(1:|2:s)]."
epidemic_cp: "[p] loses [n] astronaut[n(1:|2:s)] and 1 purple alien."
epidemic_cb: "[p] loses [n] astronaut[n(1:|2:s)] and 1 brown alien."
epidemic_cpb: "[p] loses [n] astronaut[n(1:|2:s)], 1 purple alien, and 1 brown alien."
epidemic_p: "[p] loses a purple alien."
epidemic_b: "[p] loses a brown alien."
epidemic_pb: "[p] loses a purple and a brown alien."
sabotage_hit: "[p] becomes the target of sabotage and loses [n] [n(0:components|1:component|2:components)]."
parts_lost: "[p]'s ship loses [n] component[n(1:|2:s)]."
sabotage_miss: "[p]'s ship is sabotaged, but the saboteurs failed."
do_not_want_planet: "[p] chooses not to land on a planet."
do_not_want_junkyard: "[p] chooses not to make bussines in junkyard."
planet: "[n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] planet: [i(flightScene/cargoRed.png)*n1] [i(flightScene/cargoYellow.png)*n2] [i(flightScene/cargoGreen.png)*n3] [i(flightScene/cargoBlue.png)*n4]"
planet_land: "[p] lands on the [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] planet."
planet_load: "[p] loads: [i(flightScene/cargoRed.png)*n] [i(flightScene/cargoYellow.png)*n1] [i(flightScene/cargoGreen.png)*n2] [i(flightScene/cargoBlue.png)*n3]"
junkyard_load: "[p] loads:"
junkyard_lost: "[p] loses:"
junkyard: "[n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] row:"
junkyard_land: "[p] takes the [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] row."
lost_flightdays: "[p] loses [n] [i(advCards/icons/flight_day.png)]."
gained_flightdays: "[p] gains [n] [i(advCards/icons/flight_day.png)]."
lost_credits: "[p] loses [n] $."
earned_credits: "[p] earns [n] $."
spacebilliard_row_assigned: "[p] assignes [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] row to [p1]."
stat_evaluating_blackhole: "Evaluating Blackhole..."
stat_power_blackhole: "Power engines or select tiles to loose."
stat_p_power_blackhole: "[p] is powering to escape blackhole."
blackhole_lost: "[p] didn't escape from blackhole and lost whole ship."
blackhole_powered_escaped: "[p] used [n] batteries to power engines and escaped from blackhole."
blackhole_lost_escaped: "[p] lost [n] tiles and escaped from blackhole."
blackhole_lost_powered_escaped: "[p] used [n] batteries to power engines and lost [n1] tiles to escape from blackhole."
blackhole_escaped: "[p] escaped from blackhole."
pirates_won: "[p] is defeated by the pirates."
pirates_loose: "[p] defeats the pirates."
pirates_tie: "[p] fights off the pirates."
reflect_missile: "[p] powered a shield to absorb cannon fire."
slavers_won: "[p] is defeated by the slavers."
slavers_loose: "[p] defeats the slavers."
slavers_tie: "[p] fights off the slavers."
smugglers_loose: "[p] defeats the smugglers."
smugglers_tie: "[p] fights off the smugglers."
smugglers_load: "[p] loads: [i(flightScene/cargoRed.png)*n] [i(flightScene/cargoYellow.png)*n1] [i(flightScene/cargoGreen.png)*n2] [i(flightScene/cargoBlue.png)*n3]"
smugglers_looting: "[p] gives up: [i(flightScene/cargoRed.png)*n] [i(flightScene/cargoYellow.png)*n1] [i(flightScene/cargoGreen.png)*n2] [i(flightScene/cargoBlue.png)*n3] [i(flightScene/dialog_battery.png)*n4]"
smugglers_won: "[p] is defeated by the smugglers."
combatzone_engine: "[p] has the weakest engine strength."
combatzone_cannon: "[p] has the weakest cannon strength."
combatzone_crew: "[p] has the fewest crew members."
no_crew_left: "[vecP(, | and )] [vecPn(1:has|2:have)] no human crew left."
no_engines: "[vecP(, | and )] [vecPn(1:has|2:have)] no engine strength and must give up on the flight."
faces_sabotage: "[p] has the smallest crew and becomes the target of sabotage!"
combat_zone_skipped: "Only one player left. Skipping combat zone."
spacebilliards_skipped: "Only one player left. Skipping space billiards."
sabotage_skipped: "Only one player left. Skipping sabotage."
view_ships: "View Ships"
view_score: "View Score"
continue: "Continue"
close: "Done"
back: "Back"
warning: "Warning"
"yes": "Yes"
"no": "No"
ok: "OK"
players_give_up_flight: "[vecP(, | and )] [vecPn(1:gives up|2:give up)] on the flight."
give_up_flight: "Give up on this flight"
give_up_summary: "You will [n(-9999:lose|1:still earn)] [n] $ if you give up now."
cant_give_up: "You can't give up on the flight during an adventure."
give_up_flight_warning: "If you give up, you get no bonuses and your goods will be sold at half price.<br/><br/>Are you sure you want to give up on this flight?"
can_load_aliens_warning: "Your ship can carry more aliens. Are you sure you want to fly anyway?"
need_human_crew_warning: "Ships with no human crew must give up on the flight. Are you sure you want to do this?"
zero_speed_openspace_warning: "Ships with no engine strength must give up on the flight. Are you sure you want engine strength 0?"
techie_not_used_warning: "Are you sure you don't want use your Techie Alien?"
nonfunctional_ship_piece_warning: "The section you have chosen has no human crew. You will have to give up on the flight immediately. Are you sure you want to do this?"
can_load_better_cargo: "You can drag goods off your ship to make room for more valuable goods. Are you sure you are done arranging cargo?"
can_load_more_cargo: "Your ship has empty cargo containers. If you find better goods later, you will be able to discard goods to make room. Are you sure you are done loading cargo?"
tap_to_continue: "[v(Tap|Click)][v(| or press enter)] to continue"
end_the_flight: "Finish the Flight"
arrive_to_station: "Dock at<br/>[s]."
return_to_station: "Return to<br/>[s]."
miss: "Miss."
uffff: "Whew!"
gained_experience: "Experience points earned:"
waiting_for_server: "Waiting for server ..."
next_rank: "Next rank:"
total_experience: "Current Experience Points:"
ended_with_positive_credits: "You earned credits!"
ended_with_zero_or_negative_credits: "You didn't earn any credits."
you_defeated_player: "You defeated [p1]."
for_game_length: "For game length:"
next_round: "Next Round"
back_to_map: "Proceed"
quit_quick_duel: "End Quick Duel"
decide_whether_continue_quick_duel: "Decide if you want to play another round or end the quick duel."
player_not_decided_yet: "[p] is deciding whether to play another round ..."
player_wants_to_continue: "[p] would like to play another round."
player_does_not_want_to_continue: "[p] left the quick duel."
replaying: "Replaying"
stat_tap_avatar_view_ship: "[v(Tap|Click)] your avatar to view your ship."
stat_tap_to_zoom_out: "[v(Tap|Click)] [i(flightScene/zoomOut.png)] to return to the flight-track view."
stat_tap_the_deck_reveal_first_adventure: "[v(Tap|Click)] the deck[v(| or press enter)] to reveal the first adventure."
stat_tap_the_deck_reveal_next_adventure: "[v(Tap|Click)] the deck[v(| or press enter)] to reveal the next adventure."
stat_tap_the_deck_reveal_last_adventure: "[v(Tap|Click)] the deck[v(| or press enter)] to reveal the final adventure."
stat_waiting_for_other_players: "Waiting for [vecP(, | and )] to reveal the next adventure."
stat_tap_end_flight: "[v(Tap|Click)] the pulsing rectangle[v(| or press enter)] to score the flight."
stat_evaluating_stardust: "Evaluating Stardust ..."
stat_evaluating_epidemic: "Evaluating Epidemic ..."
stat_evaluating_open_space: "Evaluating Open Space ..."
stat_tap_ok_to_continue: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)][v(| or press enter)] to continue."
stat_drag_battery_to_engine_or_ok: "Drag [i(flightScene/dialog_battery.png)] to [i(parts/engineDouble.png)] to increase your engine strength, or [v(tap|click)] [i(flightScene/dialog_ok.png)]."
stat_drag_battery_to_gun_or_ok: "Drag [i(flightScene/dialog_battery.png)] to [i(parts/gunDouble.png)] to increase your cannon strength, or [v(tap|click)] [i(flightScene/dialog_ok.png)]."
stat_p_power_engine: "[p] is choosing engine strength ..."
stat_p_power_shield_meteors: "[p] is deciding whether to power shield..."
stat_p_power_cannon_meteors: "[p] is deciding whether to shoot the meteor ..."
stat_confirm_or_cancel: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)] to confirm, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to cancel."
stat_drag_battery_to_gun_for_strength_or_cancel: "Drag [i(flightScene/dialog_battery.png)] to [i(parts/gunDouble.png)] until you reach strength [n] or more, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to accept defeat."
stat_p_powering_cannons: "[p] is choosing cannon strength ..."
stat_drag_battery_to_gun_or_get_hit: "Drag [i(flightScene/dialog_battery.png)] to [i(parts/gunDouble.png)] to shoot the meteor, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to get hit."
stat_power_catapult_or_get_hit: "Power catapult to shoot the meteor, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to get hit."
stat_power_gun_or_catapult_or_get_hit: "Power cannon or catapult to shoot the meteor, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to get hit."
stat_drag_battery_to_shield_or_get_hit: "Drag [i(flightScene/dialog_battery.png)] to [i(parts/shield.png)] to protect your ship, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to get hit."
stat_meteor_succ_destroyed: "The meteor will be destroyed. [v(Tap|Click)] [i(flightScene/dialog_ok.png)] to continue."
stat_meteor_succ_deflected: "The meteor will be deflected. [v(Tap|Click)] [i(flightScene/dialog_ok.png)] to continue."
stat_shot_succ_deflected: "The shot will be absorbed by your shield. [v(Tap|Click)] [i(flightScene/dialog_ok.png)] to continue."
stat_tap_to_place_aliens: "[v(Tap|Click)] the highlighted cabins [i(parts/cabin.png)] to choose aliens or human astronauts."
stat_other_is_placing_aliens: "[p] is choosing crew ..."
stat_evaluating_sabotage: "Evaluating Sabotage ..."
stat_choose_part_to_continue: "Choose which section will be your ship for the rest of the flight."
stat_p_choosig_part_to_continue: "[p] is choosing which section to pilot ..."
stat_evaluating_enemy: "Evaluating [n(0:Pirates|1:Slavers|2:Smugglers)] ..."
stat_player_defeated_enemy: "[p] has defeated the [n(0:pirates|1:slavers|2:smugglers)]."
stat_player_tied_with_enemy: "[p] has fought off the [n(0:pirates|1:slavers|2:smugglers)]."
stat_player_defeated_by_enemy: "[p] was defeated by the [n(0:pirates|1:slavers|2:smugglers)]."
stat_tap_to_recieve_credits: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)] to accept [n]$ and lose [n1] [i(advCards/icons/flight_day.png)], or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to reject."
stat_tap_to_recieve_cargo: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)] to load cargo and lose [n] [i(advCards/icons/flight_day.png)], or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to reject."
stat_choose_crate: "Choose [n][b( more)] [n(1:box|2:boxes)] of goods."
stat_choose_crew: "Choose [n][b( more)] crew member[n(1:|2:s)]."
stat_choose_battery: "Choose [n][b( more)] [n(1:battery|2:batteries)]."
stat_choose_tokens: "Choose: [s]"
stat_p_is_chosing_crew_to_submit: "[p] is choosing which [n(1:crew member|2:crew members)] to give up."
stat_p_is_chosing_battery_to_submit: "[p] is choosing which [n(1:battery|2:batteries)] to give up."
stat_tap_to_confirm: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)] to confirm"
stat_append_reject: "or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to reject"
stat_evaluating_abandoned_station: "Evaluating Abandoned Station ..."
stat_load_arrange_cargo: "Load and arrange cargo."
stat_wait_for_others_arrange_cargo: "[vecP(, | and )] [vecPn(1:is|2:are)] arranging cargo ..."
stat_cant_prevent_asteroid: "You can't prevent the meteor from hitting your ship."
stat_cant_prevent_missile: "You can't prevent the cannon fire from hitting your ship."
stat_waiting_for_players_to_finish_projectile: "Waiting for [vecP(, | and )] to resolve the [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] [n1(0:cannon shot|1:meteor)] ..."
stat_replay_asteroid_n: "Replaying [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] meteor ..."
stat_replay_missile_n: "Replaying [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] shot ..."
stat_eval_asteroid_n: "Evaluating [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] meteor ..."
stat_eval_missile_n: "Evaluating [n(0:none|1:first|2:second|3:third|4:fourth|5:fifth|6:sixth|7:seventh|8:eighth|9:ninth|10:tenth|11:eleventh|12:twelfth|13:thirteenth|14:fourteenth|15:fifteenth|16:sixteenth|17:seventeenth|18:eighteenth|19:nineteenth|20:twentieth|21:twenty-first|22:twenty-second|23:twenty-third|24:twenty-fourth|25:twenty-fifth|26:twenty-sixth|27:twenty-seventh|28:twenty-eighth|29:twenty-ninth|30:thirtieth|31:so-manieth)] shot ..."
stat_evaluating_meteoric_swarm: "Evaluating Meteor Swarm ..."
stat_evaluating_planets: "Evaluating Planets ..."
stat_evaluating_abandoned_ship: "Evaluating Abandoned Ship ..."
stat_p_evaluating_abandoned_ship: "[p] is evaluating Abandoned Ship ..."
stat_pick_planet_or_cancel: "[v(Tap|Click)] on a planet to select it, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to choose not to land."
stat_others_chosing_planet: "[p] is choosing a planet ..."
stat_planet_confirm_or_cancel: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)] to confirm, or choose another planet, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to not land."
stat_pick_junkyard_or_cancel: "[v(Tap|Click)] on a junkyard row to select it, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to choose none."
stat_others_chosing_junkyard: "[p] is choosing a junkyard row ..."
stat_junkyard_confirm_or_cancel: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)] to confirm, or choose another junkyard row, or [v(tap|click)] [i(flightScene/dialog_cancel.png)] to choose none."
stat_others_chosing_spacebilliard: "[p] is choosing a row ..."
stat_choose_spacebilliard_row: "Drag the arrow [i(flightScene/dialog_arrow.png)] to other player's avatar to assign card row to him."
stat_spacebilliard_confirm_or_reselect: "[v(Tap|Click)] [i(flightScene/dialog_ok.png)] to confirm or change your selection."
stat_determining_guns: "Determining [i(flightScene/dialog_gun.png)] strength of each player ..."
stat_determining_engines: "Determining [i(flightScene/dialog_engine.png)] strength of each player ..."
stat_determining_crew: "Counting [i(flightScene/dialog_crew.png)] for each player ..."
stat_loot_abandoned_station: "Decide whether to loot the abandoned station."
stat_player_loot_abandoned_station: "[p] is deciding whether to loot the abandoned station ..."
stat_pl_has_lowest_stat: "[p] has the [s(gun:weakest <img src='flightScene/dialog_gun.png' height='f' /> strength|engine:weakest <img src='flightScene/dialog_engine.png' height='f' /> strength|crew:fewest <img src='flightScene/dialog_crew.png' height='f' />)]"
gets_under_fire: "and gets shot at."
wait_for_others_to_load: "Waiting for players to load the flight screen ..."
penalty: "Penalty"
card_help_openspace: "All ships will move forward according to their engine strength [i(flightScene/dialog_engine.png)].<br /><br /> Single engines count +1. Double engines count +2, but only if you spend a battery [i(flightScene/dialog_battery.png)].<br /><br /> A ship with 0 engine strength will have to give up on the flight."
card_help_stardust: "Each player moves one [i(advCards/icons/flight_day.png)] backwards for each exposed connector on his or her ship."
card_help_epidemic: "Each player loses one crew member (human or alien) in every occupied cabin directly connected to another occupied cabin."
card_help_sabotage: "This adventure card blows up a random component on the ship with the smallest crew. If multiple ships are tied for smallest crew, the one in front is sabotaged. <br /><br /> Coordinates are determined by dice. If there is no component at those coordinates, new coordinates are rolled. If three sets of coordinates are rolled without hitting a component, the saboteurs give up and nothing happens."
card_help_abandoned_station1: "If you have [n] or more crew members, you can send them to explore the abandoned station and collect"
card_help_abandoned_station2: ". If you do, you will move [n] [i(advCards/icons/flight_day.png)] backwards."
card_help_abandoned_station3: "You WILL NOT LOSE crew members on this adventure. All of them will return to your ship."
card_help_abandoned_ship: "You may give up [n] crew members to collect [n1] $.<br /><br /> If you do, you will move [n2] [i(advCards/icons/flight_day.png)] backwards."
card_help_planets: "Each player may land on one of the planets and take the indicated goods.<br /><br /> You can't pick a planet already picked by another player.<br /><br /> Every player who picks a planet will move [n] [i(advCards/icons/flight_day.png)] backwards."
card_help_meteors_intro: "All ships face all the depicted meteors. Dice are rolled for each meteor to determine its row or column."
card_help_meteors_small: "A small meteor will just bounce harmlessly off your ship unless it hits an exposed connector. You can protect an exposed connector with a properly oriented shield if you spend a battery [i(flightScene/dialog_battery.png)]. A hit on an unprotected exposed connector destroys that component."
card_help_meteors_large: "Against a large meteor from the front, your only defense is to shoot it with a cannon pointing at the meteor in the same column."
card_help_meteors_large_side: "Against a large meteor from the side, your only defense is to shoot it with a cannon pointing at the meteor. The cannon must be in the same row or an adjacent row."
card_help_meteors_large_behind: "Against a large meteor from behind, your only defense is to shoot it with a cannon pointing at the meteor. The cannon must be in the same column or an adjacent column."
card_help_enemy_intro: "[n(0:Pirates|1:Slavers|2:Smugglers)] will attack each player in order until they are defeated."
card_help_enemy_condition: "To defeat the [n(0:pirates|1:slavers|2:smugglers)] you need cannon strength greater than [n1]."
card_help_pirates_loss: "If you have strength less than [n], the pirates defeat you [i(flightScene/dialog_fight_loss.png)] and you will come under fire."
card_help_smugglers_loss: "If you have strength less than [n], the smugglers defeat you [i(flightScene/dialog_fight_loss.png)] and steal your [n1] most valuable goods. If you run out of goods, they steal batteries."
card_help_slavers_loss: "If you have strength less than [n], the slavers defeat you [i(flightScene/dialog_fight_loss.png)]) and and take [n1] crew members."
card_help_enemy_tie: "If you have strength exactly [n], you fight the enemies off [i(flightScene/dialog_fight_tie.png)]. You get no rewards or penalties, and they move on to the next target."
card_enemies_reward: "If you have strength greater than [n], you defeat the [n1(0:pirates|1:slavers|2:smugglers)] [i(flightScene/dialog_fight_win.png)] and earn reward."
card_enemies_days: "If you claim the reward, you move back [n] [i(advCards/icons/flight_day.png)]."
card_help_junkyard: "In the junkyard, each player can exchange resources or events for other resources, cargo, or credits.<br /><br /> Each player may land on one row (section) of junkyard.<br /><br /> You can't pick a row already picked by another player. Also, you can't pick a row that you don't have enough resources to pay for. Such rows are faded to grey.<br /><br /> You have to give up a cargo, crew, batteries, or withstand meteors or missiles depicted in the left part of card row.<br /><br /> Then you may load a cargo, crew, batteries, or get some credits, depicted in the right part of the card row."
card_help_black_hole: "To escape the black hole, you need your engine strength to match or exceed the black hole's strength.<br /><br /> If you can't match the black hole's strength, you can still escape by giving up two of your ship components, for each point of strength difference."
card_help_space_billiards: "Each player chooses a row and an opponent (drag an arrow from the card row and release it on opponent's avatar on the right side of the screen). The opponent defends against those meteors.<br /><br /> There is no restriction on which opponent you can target. One player may have to defend against multiple rows of meteors.<br /><br /> Tip: You can use this card against a competitor to level the playing field, but sometimes it is more fun to send the meteors at the ship that is most likely to bust apart."
card_help_fire: "Dice are rolled to determine the row or column of each shot."
card_help_small_shot: "Light cannon fire destroys the component it hits. You can protect your ship with a properly oriented shield if you spend a battery [i(flightScene/dialog_battery.png)]."
card_help_large_shot: "There is no way to defend against heavy cannon fire. The component it hits is always destroyed."
card_help_cargo_general: "You may put [i(flightScene/cargoBlue.png)], [i(flightScene/cargoGreen.png)], and [i(flightScene/cargoYellow.png)] into any cargo container."
card_help_cargo_red: "Hazardous goods [i(flightScene/cargoRed.png)] can be carried only in red containers [i(flightScene/cardHelp/spec_slot.png)]."
card_help_cargo_prices: "Price List:"
card_help_combatzone_intro: "The Combat Zone evaluates all players on 3 criteria. In each criterion, the weakest player must pay a penalty. If players are tied, only the one farther ahead pays the penalty."
card_help_combatzone_condition: "[n(1:First|2:Next|3:Finally)], the player with the [n1(1:fewest crew members|2:weakest engine strength|3:weakest cannon strength)]"
card_help_combatzone_sanction_days: "moves [n] [i(advCards/icons/flight_day.png)] backwards."
card_help_combatzone_sanction_cargo: "loses his or her [n] most valuable goods. If the player runs out of goods, batteries are taken to make up the difference."
card_help_combatzone_sanction_crew: "loses [n] crew members."
card_help_combatzone_sanction_fire: "gets shot at."
tutorial_stat_tap_your_ship: "[v(Tap|Click)] your ship or your avatar to zoom in on your ship."
tutorial_stat_tap_instructor: "[v(Tap|Click)] the instructor's avatar to zoom in on his ship."
tutorial_stat_chose_first_planet: "[v(Tap|Click)] the top line of goods. To confirm it, [v(tap|click)] [i(flightScene/dialog_ok.png)] next to your avatar."
tutorial_stat_chose_sec_planet: "[v(Tap|Click)] the second line of goods. To confirm it, [v(tap|click)] [i(flightScene/dialog_ok.png)] next to your avatar."
tutorial_stat_load_cargo: "Drag these goods to suitable cargo containers. [v(Tap|Click)] [i(flightScene/dialog_ok.png)] when they are loaded."
tutorial_stat_tap_planets_detail: "[v(Tap|Click)] on the Planets adventure to read the details."
tutorial_stat_tap_meteors_detail: "[v(Tap|Click)] on the Meteor Swarm adventure to read the details."
tutorial_stat_power_double_gun: "[v(Tap|Click)] a battery [i(flightScene/dialog_battery.png)] to power your double cannon [i(parts/gunDouble.png)]. To confirm, [v(tap|click)] [i(flightScene/dialog_ok.png)]."
tutorial_stat_view_help: "[v(Tap|Click)] the [i(common/help.png)] button in the upper right corner."
info_ship_class: "Ship Class [s]"
info_curr_credits: "[i(final/cash.png)] Credits earned in flight: [n] $"
info_prev_credits: "Credits from previous flights: [n] $"
info_lost_components: "[i(flightScene/dialog_lost_part.png)] Components lost: [n] (Insurance: [n1])"
info_lost_components_penalty: "Penalty for lost components: [n] $"
info_final_order_reward: "[i(final/order.png)] Rewards for finishing: [s] $. Currently expecting [n] $."
info_best_ship: "[i(final/finest.png)] Reward for fewest exposed connectors: [n] $.<br /> Currently would go to [vecP(, | and )]."
info_cargo_value: "Cargo value: [n] $"
info_crew: "Crew: [n]"
info_energy: "Energy: [n] [i(flightScene/dialog_battery.png)]"
info_engine_strength: "Engine strength: [s] [i(flightScene/dialog_engine.png)]"
info_cannon_strength: "Cannon strength: [s] [i(flightScene/dialog_gun.png)]"
info_exposed_connectors: "Exposed connectors: [n]"
diplomat_caption: "Diplomat"
diplomat_description: "Once during the flight, you can avoid the actions of an enemy OR one row of a combat zone; then the diplomat leaves."
lawyer_caption: "Lawyer"
lawyer_description: "You do not pay for lost components."
manager_caption: "Manager"
manager_description: "Your other aliens have their effects increased by +1. At the end of the flight, you gain 1 $, 3 $, or 6 $ if you have 1, 2, or 3 aliens on board."
merchant_caption: "Merchant"
merchant_description: "At the end of the flight, you get one extra credit for red and yellow goods (even if you gave up)."
techie_caption: "Techie"
techie_description: "If you have at least 1 battery token left, your first battery use is for free (once per adventure card)."
cyan_alien_choose_btn: "Choose specialization!"
cyan_alien_chosen_btn: "Specialization: [s]"
